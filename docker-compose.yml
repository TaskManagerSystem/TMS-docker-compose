version: '3.8'

services:
  zookeeper:
    restart: on-failure
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - my_network

  kafka:
    restart: on-failure
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
         KAFKA_BROKER_ID: 1
         KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_BOOTSTRAP},PLAINTEXT_HOST://localhost:29092
         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
         KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my_network

  mysqldb-main:
      restart: on-failure
      image: mysql
      env_file: .env
      environment:
        - MYSQL_USER=${MYSQLDB_USER_MAIN}
        - MYSQL_PASSWORD=${MYSQLDB_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
        - MYSQL_DATABASE=${DB_NAME_MAIN}
      ports:
        - "${DB_MAIN_EXTERNAL_PORT}:${DB_INTERNAL_PORT}"
      healthcheck:
        test: [ "CMD-SHELL", "mysqladmin ping -h mysqldb-main -u $MYSQLDB_USER_MAIN -p$MYSQLDB_PASSWORD" ]
        interval: 15s
        timeout: 60s
        retries: 5
      networks:
        - my_network

  mysqldb-attachment:
    restart: on-failure
    image: mysql
    env_file: .env
    environment:
      - MYSQL_USER=${MYSQLDB_USER_ATTACHMENT}
      - MYSQL_PASSWORD=${MYSQLDB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME_ATTACHMENT}
    ports:
      - "${DB_ATTACHMENT_EXTERNAL_PORT}:${DB_INTERNAL_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h mysqldb-attachment -u $MYSQLDB_USER_ATTACHMENT -p$MYSQLDB_PASSWORD" ]
      interval: 15s
      timeout: 60s
      retries: 5
    networks:
      - my_network

  main-service:
    restart: on-failure
    build:
      context: ./TMS-main-service
      dockerfile: Dockerfile
    environment:
      SPRING_APPLICATION_JSON: '{
                  "spring.datasource.driver-class-name" : "com.mysql.cj.jdbc.Driver",
                  "spring.datasource.url"  : "jdbc:mysql://mysqldb-main:${DB_INTERNAL_PORT}/${DB_NAME_MAIN}",
                  "spring.datasource.username" : "${MYSQLDB_USER_MAIN}",
                  "spring.datasource.password" : "${MYSQLDB_PASSWORD}",
                  "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQLDialect",
                  "jwt.secret" : "${JWT_SECRET}",
                  "jwt.expiration" : "${JWT_EXPIRATION}",
                  "spring.kafka.bootstrap-servers" : "${KAFKA_BOOTSTRAP}",
                  "spring.kafka.consumer.properties.spring.json.trusted.packages" : "${JSON_TRUSTED_PACKAGES}",
                  "spring.kafka.consumer.value-deserializer" : "org.springframework.kafka.support.serializer.JsonDeserializer",
                  "spring.kafka.consumer.key-deserializer" : "org.apache.kafka.common.serialization.StringDeserializer"
                }'
    ports:
      - "${MAIN_SERVICE_PORT}:${MAIN_SERVICE_PORT}"
    depends_on:
      mysqldb-main:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - my_network

  attachment-service:
    restart: on-failure
    build:
      context: ./TMS-attachment-service
      dockerfile: Dockerfile
    environment:
      SPRING_APPLICATION_JSON: '{
                  "spring.datasource.driver-class-name" : "com.mysql.cj.jdbc.Driver",
                  "spring.datasource.url"  : "jdbc:mysql://mysqldb-attachment:${DB_INTERNAL_PORT}/${DB_NAME_ATTACHMENT}",
                  "spring.datasource.username" : "${MYSQLDB_USER_ATTACHMENT}",
                  "spring.datasource.password" : "${MYSQLDB_PASSWORD}",
                  "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQLDialect",
                  "spring.kafka.consumer.properties.spring.json.trusted.packages" : "${JSON_TRUSTED_PACKAGES}",
                  "spring.kafka.consumer.value-deserializer" : "org.springframework.kafka.support.serializer.JsonDeserializer",
                  "spring.kafka.consumer.key-deserializer" : "org.apache.kafka.common.serialization.StringDeserializer",
                  "spring.kafka.bootstrap-servers" : "${KAFKA_BOOTSTRAP}",
                  "spring.kafka.consumer.group-id" : "${KAFKA_GROUP_ID}",
                  "dropbox.refreshToken" : "${DROPBOX_REFRESH_TOKEN}",
                  "dropbox.appKey" : "${DROPBOX_APP_KEY}",
                  "dropbox.appSecret" : "${DROPBOX_APP_SECRET}"
                }'
    ports:
      - "${ATTACHMENT_SERVICE_PORT}:${ATTACHMENT_SERVICE_PORT}"
    depends_on:
      mysqldb-attachment:
        condition: service_healthy
      main-service:
        condition: service_started
    networks:
      - my_network

  notification-service:
    restart: on-failure
    build:
      context: ./TMS-notification-service
      dockerfile: Dockerfile
    environment:
      SPRING_APPLICATION_JSON: '{
                  "spring.kafka.consumer.properties.spring.json.trusted.packages" : "${JSON_TRUSTED_PACKAGES}",
                  "spring.kafka.consumer.value-deserializer" : "org.springframework.kafka.support.serializer.JsonDeserializer",
                  "spring.kafka.consumer.key-deserializer" : "org.apache.kafka.common.serialization.StringDeserializer",
                  "service.email" : "${SERVICE_EMAIL}",
                  "service.password" : "${SERVICE_PASSWORD}",
                  "base.url" : "${BASE_URL}:${MAIN_SERVICE_PORT}",
                  "spring.kafka.bootstrap-servers" : "${KAFKA_BOOTSTRAP}",
                  "spring.kafka.consumer.group-id" : "${KAFKA_GROUP_ID}",
                  "telegram.bot.name" : "${TELEGRAM_BOT_NAME}",
                  "telegram.bot.token" : "${TELEGRAM_BOT_TOKEN}"
                }'
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"
    depends_on:
      main-service:
        condition: service_started
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
